{
  "version": 3,
  "sources": ["../../src/actions/messageActions.ts"],
  "sourcesContent": ["import * as WAWebJS from \"whatsapp-web.js\";\nimport { MessageType } from \"../types/types\";\nimport * as dotenv from \"dotenv\";\nimport { WA_BOT_ID } from \"..\";\nimport { UserModel } from \"../models/models\";\nimport { REACT_EMOGIES } from \"../utils/reply/replies\";\nimport { random } from \"./sendMessage\";\nimport { OWNER_ADMIN_CMDS } from \"../utils/Commands/allCmds\";\ndotenv.config();\n\ninterface Message extends WAWebJS.Message {\n  _data?: {\n    notifyName?: string;\n  };\n}\n\n/**\n * INFO:\n * @param { string } message Get the `Message` object\n * @returns { MessageType }\n */\nexport const checkMessage = async (message: Message): Promise<MessageType> => {\n  if (\n    (message.fromMe || message.id.fromMe) &&\n    String(message.to) === String(WA_BOT_ID)\n  ) {\n    return {\n      name: message._data?.notifyName,\n      role: \"OWNER\",\n      chatId: message.from,\n    };\n  } else if (String(message.from) === String(WA_BOT_ID)) {\n    const grpAdmins = await UserModel.find({ roles: \"ADMIN\" });\n    const isAdmin = grpAdmins.some(\n      (admin) => admin.recipitantId === message.author\n    );\n    if (!isAdmin) {\n      return {\n        name: message._data?.notifyName,\n        role: \"STUDENT\",\n        chatId: message.author || \"\",\n      };\n    } else {\n      return {\n        name: message._data?.notifyName,\n        role: \"ADMIN\",\n        chatId: message.author || \"\",\n      };\n    }\n  } else {\n    return {\n      role: \"NONE\",\n      chatId: message.author || \"\",\n    };\n  }\n};\n\n/**\n * INFO:\n * @param { WAWebJS.Message } messageInstance takes messageInstance\n * reacts on messages with random emojis\n */\nexport const react = async (messageInstance: WAWebJS.Message) => {\n  await messageInstance.react(REACT_EMOGIES[random(REACT_EMOGIES.length)]);\n};\n\n/**\n * INFO:\n * This function filters the cmds.\n * @param { string } messageBody\n * @returns  { Boolean }\n */\nexport const superCmdFilter = (messageBody: string): Boolean => {\n  const cmdByUser = messageBody.split(\" \")[0].slice(1);\n  return OWNER_ADMIN_CMDS.some((cmds) => cmds.some((cmd) => cmd === cmdByUser));\n};\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,kBAAAE,EAAA,UAAAC,EAAA,mBAAAC,IAAA,eAAAC,EAAAL,GAEA,IAAAM,EAAwB,qBACxBC,EAA0B,cAC1BC,EAA0B,4BAC1BC,EAA8B,kCAC9BC,EAAuB,yBACvBC,EAAiC,qCACjCL,EAAO,OAAO,EAaP,MAAMJ,EAAe,MAAOU,GAA2C,CArB9E,IAAAC,EAAAC,EAAAC,EAsBE,OACGH,EAAQ,QAAUA,EAAQ,GAAG,SAC9B,OAAOA,EAAQ,EAAE,IAAM,OAAO,WAAS,EAEhC,CACL,MAAMC,EAAAD,EAAQ,QAAR,YAAAC,EAAe,WACrB,KAAM,QACN,OAAQD,EAAQ,IAClB,EACS,OAAOA,EAAQ,IAAI,IAAM,OAAO,WAAS,GAChC,MAAM,YAAU,KAAK,CAAE,MAAO,OAAQ,CAAC,GAC/B,KACvBI,GAAUA,EAAM,eAAiBJ,EAAQ,MAC5C,EAQS,CACL,MAAMG,EAAAH,EAAQ,QAAR,YAAAG,EAAe,WACrB,KAAM,QACN,OAAQH,EAAQ,QAAU,EAC5B,EAVO,CACL,MAAME,EAAAF,EAAQ,QAAR,YAAAE,EAAe,WACrB,KAAM,UACN,OAAQF,EAAQ,QAAU,EAC5B,EASK,CACL,KAAM,OACN,OAAQA,EAAQ,QAAU,EAC5B,CAEJ,EAOaT,EAAQ,MAAOc,GAAqC,CAC/D,MAAMA,EAAgB,MAAM,mBAAc,UAAO,gBAAc,MAAM,CAAC,CAAC,CACzE,EAQab,EAAkBc,GAAiC,CAC9D,MAAMC,EAAYD,EAAY,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC,EACnD,OAAO,mBAAiB,KAAME,GAASA,EAAK,KAAMC,GAAQA,IAAQF,CAAS,CAAC,CAC9E",
  "names": ["messageActions_exports", "__export", "checkMessage", "react", "superCmdFilter", "__toCommonJS", "dotenv", "import__", "import_models", "import_replies", "import_sendMessage", "import_allCmds", "message", "_a", "_b", "_c", "admin", "messageInstance", "messageBody", "cmdByUser", "cmds", "cmd"]
}
