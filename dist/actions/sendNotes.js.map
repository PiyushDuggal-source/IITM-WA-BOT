{
  "version": 3,
  "sources": ["../../src/actions/sendNotes.ts"],
  "sourcesContent": ["import * as WAWebJS from \"whatsapp-web.js\";\nimport { BOT } from \"..\";\nimport { NOTES } from \"../resources/notes\";\nimport { MessageType, Notes } from \"../types/types\";\nimport { FOOTERS } from \"../utils/reply/footers\";\nimport { GREETINGS, HEY_EMOJIES } from \"../utils/reply/replies\";\nimport { sendAndDeleteMsg } from \"./sendAndDeleteMsg\";\nimport { random } from \"./sendMessage\";\n\n// Helper functions\nconst notesFormatter = (notes: Notes, content: string) => {\n  notes.forEach((note) => {\n    content += `\\n\\n*_NAME_* : *${note.name}*\\n\\n -----------*Content*------------`;\n    note.content.forEach((noteContent) => {\n      content += `\\n\\nName of the Notes: _${noteContent.name}_\\nLink: ${noteContent.link}`;\n    });\n  });\n  content += `\\n\\n: ${FOOTERS.footers[random(FOOTERS.footerMsgLength)]}`;\n  return content;\n};\n\nlet adminMsg = `*These are the Notes ${\n  GREETINGS.admin[random(GREETINGS.adminMsgNumber)]\n}* ${HEY_EMOJIES[random(HEY_EMOJIES.length)]}`;\n\nlet userMsg = `*These are the Notes ${\n  GREETINGS.member[random(GREETINGS.memberMsgNumber)]\n}* ${\n  HEY_EMOJIES[random(HEY_EMOJIES.length)]\n}\\n\\n*Use filter if you want specific subject's notes*\\nEg: *!notes {SubjectName}* _without {}_\\n\\nNote: _I am not connected, associated, affiliated with any of the Owners of these links to Promote, Encourage any Channel/Group, I found the links on internet only._`;\n// }\\n\\n`;\n\nexport const sendNotes = async (\n  client: WAWebJS.Client,\n  messageInstance: WAWebJS.Message,\n  who: MessageType\n) => {\n  let content = who === \"ADMIN\" ? adminMsg : userMsg;\n  content = notesFormatter(NOTES, content)\n  if (who === \"ADMIN\") {\n    const chats = await client.getChats();\n    const bot = chats[BOT];\n    bot.sendMessage(content);\n  } else if (who !== \"NONE\") {\n    sendAndDeleteMsg(client, messageInstance, who, content);\n  }\n};\n\nconst sorryMsg = `Sorry ${\n  GREETINGS.member[random(GREETINGS.memberMsgNumber)]\n}\\nOnly one word is allowed after !notes command ${\n  HEY_EMOJIES[random(HEY_EMOJIES.length)]\n}`;\n\nconst invalidMsg =\n  \"The filter is invalid, please use your *permutation* and *combination* knowledge to serach for your notes, like:\\n*!notes mad1* -> *!notes mad*\\nor else, please wait for a while, we will upload the respective notes soon\";\n\nexport const sendNotesByFilter = async (\n  client: WAWebJS.Client,\n  messageBody: string,\n  messageInstance: WAWebJS.Message,\n  who: MessageType\n) => {\n  const msgList = messageBody.split(\" \");\n  if (who !== \"NONE\") {\n    const chats = await client.getChats();\n    const bot = chats[BOT];\n    if (msgList.length > 2) {\n      bot.sendMessage(sorryMsg);\n    } else {\n      // First check in the Names\n      const filteredNotes = NOTES.filter((note) => {\n        return note.name\n          .toLocaleLowerCase()\n          .includes(msgList[1].toLocaleLowerCase());\n      });\n\n      // If not in the Upper Names, check inside\n      if (!filteredNotes.length) {\n        NOTES.forEach((note) => {\n          note.content.filter((contNote) => {\n            if (\n              contNote.name\n                .toLocaleLowerCase()\n                .includes(msgList[1].toLocaleLowerCase())\n            ) {\n              filteredNotes.push(note);\n            }\n          });\n        });\n      }\n      let content = userMsg;\n      if (!filteredNotes.length) {\n        bot.sendMessage(invalidMsg);\n      } else if (who === \"ADMIN\") {\n        content = notesFormatter(filteredNotes, content);\n        bot.sendMessage(content);\n      } else {\n        content = notesFormatter(filteredNotes, content);\n        sendAndDeleteMsg(client, messageInstance, who, content);\n      }\n\n      //     if (who === \"ADMIN\") {\n      //     } else {\n      //       let content = userMsg;\n      //       filteredNotes.forEach((note) => {\n      //         note.content.forEach((not) => {\n      //           content += `\\n\\nName of the Content: _${not.name}_\\nLink: ${not.link}`;\n      //         });\n      //       });\n      //       content += `\\n\\n: ${FOOTERS.footers[random(FOOTERS.footerMsgLength)]}`;\n      //       bot.sendMessage(content);\n      //     }\n      //   }\n      // } else if (who !== \"NONE\") {\n      //   if (msgList.length > 2) {\n      //     sendAndDeleteMsg(client, messageInstance, who, sorryMsg);\n      //   } else {\n      //     // First check in the Contents\n      //     const filteredNotes = NOTES.map((note) =>\n      //       note.content.filter((not) =>\n      //         not.name.toLocaleLowerCase().includes(msgList[1].toLocaleLowerCase())\n      //       )\n      //     );\n      //\n      //     // If not in the content, check in the upper names\n      //     if (!filteredNotes.flat().length) {\n      //       const filteredNotes = NOTES.filter((note) =>\n      //         note.name.toLocaleLowerCase().includes(msgList[1].toLocaleLowerCase())\n      //       );\n      //       let content = userMsg;\n      //       filteredNotes.forEach((note) => {\n      //         content += `\\n\\n*_NAME_* : *${note.name}*\\n\\n -----------*Content*------------`;\n      //         note.content.forEach((noteContent) => {\n      //           content += `\\n\\nName of the Content: _${noteContent.name}_\\nLink: ${noteContent.link}`;\n      //         });\n      //       });\n      //\n      //       if (!filteredNotes.length) {\n      //         sendAndDeleteMsg(client, messageInstance, who, invalidMsg);\n      //       } else {\n      //         content += `\\n\\n: ${\n      //           FOOTERS.footers[random(FOOTERS.footerMsgLength)]\n      //         }`;\n      //         sendAndDeleteMsg(client, messageInstance, who, content);\n      //       }\n      //     } else {\n      //       let content = userMsg;\n      //       filteredNotes.forEach((note) => {\n      //         note.forEach((not) => {\n      //           content += `\\n\\nName of the Content: _${not.name}_\\nLink: ${not.link}`;\n      //         });\n      //       });\n      //       content += `\\n\\n: ${FOOTERS.footers[random(FOOTERS.footerMsgLength)]}`;\n      //       sendAndDeleteMsg(client, messageInstance, who, content);\n      //     }\n    }\n  }\n};\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,eAAAE,EAAA,sBAAAC,IAAA,eAAAC,EAAAJ,GACA,IAAAK,EAAoB,cACpBC,EAAsB,8BAEtBC,EAAwB,kCACxBC,EAAuC,kCACvCC,EAAiC,8BACjCC,EAAuB,yBAGvB,MAAMC,EAAiB,CAACC,EAAcC,KACpCD,EAAM,QAASE,GAAS,CACtBD,GAAW;AAAA;AAAA,cAAmBC,EAAK;AAAA;AAAA,mCACnCA,EAAK,QAAQ,QAASC,GAAgB,CACpCF,GAAW;AAAA;AAAA,sBAA2BE,EAAY;AAAA,QAAgBA,EAAY,MAChF,CAAC,CACH,CAAC,EACDF,GAAW;AAAA;AAAA,IAAS,UAAQ,WAAQ,UAAO,UAAQ,eAAe,CAAC,IAC5DA,GAGT,IAAIG,EAAW,wBACb,YAAU,SAAM,UAAO,YAAU,cAAc,CAAC,MAC7C,iBAAY,UAAO,cAAY,MAAM,CAAC,IAEvCC,EAAU,wBACZ,YAAU,UAAO,UAAO,YAAU,eAAe,CAAC,MAElD,iBAAY,UAAO,cAAY,MAAM,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,uKAIjC,MAAMf,EAAY,MACvBgB,EACAC,EACAC,IACG,CACH,IAAIP,EAAUO,IAAQ,QAAUJ,EAAWC,EAC3CJ,EAAUF,EAAe,QAAOE,CAAO,EACnCO,IAAQ,SACI,MAAMF,EAAO,SAAS,GAClB,KAAG,EACjB,YAAYL,CAAO,EACdO,IAAQ,WACjB,oBAAiBF,EAAQC,EAAiBC,EAAKP,CAAO,CAE1D,EAEMQ,EAAW,SACf,YAAU,UAAO,UAAO,YAAU,eAAe,CAAC;AAAA,gDAElD,iBAAY,UAAO,cAAY,MAAM,CAAC,IAGlCC,EACJ;AAAA;AAAA,4EAEWnB,EAAoB,MAC/Be,EACAK,EACAJ,EACAC,IACG,CACH,MAAMI,EAAUD,EAAY,MAAM,GAAG,EACrC,GAAIH,IAAQ,OAAQ,CAElB,MAAMK,GADQ,MAAMP,EAAO,SAAS,GAClB,KAAG,EACrB,GAAIM,EAAQ,OAAS,EACnBC,EAAI,YAAYJ,CAAQ,MACnB,CAEL,MAAMK,EAAgB,QAAM,OAAQZ,GAC3BA,EAAK,KACT,kBAAkB,EAClB,SAASU,EAAQ,CAAC,EAAE,kBAAkB,CAAC,CAC3C,EAGIE,EAAc,QACjB,QAAM,QAASZ,GAAS,CACtBA,EAAK,QAAQ,OAAQa,GAAa,CAE9BA,EAAS,KACN,kBAAkB,EAClB,SAASH,EAAQ,CAAC,EAAE,kBAAkB,CAAC,GAE1CE,EAAc,KAAKZ,CAAI,CAE3B,CAAC,CACH,CAAC,EAEH,IAAID,EAAUI,EACTS,EAAc,OAERN,IAAQ,SACjBP,EAAUF,EAAee,EAAeb,CAAO,EAC/CY,EAAI,YAAYZ,CAAO,IAEvBA,EAAUF,EAAee,EAAeb,CAAO,KAC/C,oBAAiBK,EAAQC,EAAiBC,EAAKP,CAAO,GANtDY,EAAI,YAAYH,CAAU,CA+D9B,CACF,CACF",
  "names": ["sendNotes_exports", "__export", "sendNotes", "sendNotesByFilter", "__toCommonJS", "import__", "import_notes", "import_footers", "import_replies", "import_sendAndDeleteMsg", "import_sendMessage", "notesFormatter", "notes", "content", "note", "noteContent", "adminMsg", "userMsg", "client", "messageInstance", "who", "sorryMsg", "invalidMsg", "messageBody", "msgList", "bot", "filteredNotes", "contNote"]
}
