{
  "version": 3,
  "sources": ["../../src/actions/sendNotes.ts"],
  "sourcesContent": ["import * as WAWebJS from \"whatsapp-web.js\";\r\nimport { BOT } from \"..\";\r\nimport { NOTES } from \"../resources/notes\";\r\nimport { MessageType, Notes } from \"../types/types\";\r\nimport { FOOTERS } from \"../utils/reply/footers\";\r\nimport { GREETINGS, HEY_EMOJIES } from \"../utils/reply/replies\";\r\nimport { sendAndDeleteMsg } from \"./sendAndDeleteMsg\";\r\nimport { random } from \"./sendMessage\";\r\n\r\n// Helper functions\r\nconst notesFormatter = (notes: Notes, content: string) => {\r\n  notes.forEach((note) => {\r\n    content += `\\n\\n*_NAME_* : *${note.name}*\\n\\n -----------*Content*------------`;\r\n    note.content.forEach((noteContent) => {\r\n      content += `\\n\\nName of the Notes: _${noteContent.name}_\\nLink: ${noteContent.link}`;\r\n    });\r\n  });\r\n  content += `\\n\\n: ${FOOTERS.footers[random(FOOTERS.footerMsgLength)]}`;\r\n  return content;\r\n};\r\n\r\nlet adminMsg = `*These are the Notes ${\r\n  GREETINGS.admin[random(GREETINGS.adminMsgNumber)]\r\n}* ${HEY_EMOJIES[random(HEY_EMOJIES.length)]}`;\r\n\r\nlet userMsg = `*These are the Notes ${\r\n  GREETINGS.member[random(GREETINGS.memberMsgNumber)]\r\n}* ${\r\n  HEY_EMOJIES[random(HEY_EMOJIES.length)]\r\n}\\n\\n*Use filter if you want specific subject's notes*\\nEg: *!notes {SubjectName}* _without {}_\\n\\nNote: _I am not connected, associated, affiliated with any of the Owners of these links to Promote, Encourage any Channel/Group, I found the links on internet only._`;\r\n// }\\n\\n`;\r\n\r\nexport const sendNotes = async (\r\n  client: WAWebJS.Client,\r\n  messageInstance: WAWebJS.Message,\r\n  who: MessageType\r\n) => {\r\n  let content = who === \"ADMIN\" ? adminMsg : userMsg;\r\n  content = notesFormatter(NOTES, content)\r\n  if (who === \"ADMIN\") {\r\n    const chats = await client.getChats();\r\n    const bot = chats[BOT];\r\n    bot.sendMessage(content);\r\n  } else if (who !== \"NONE\") {\r\n    sendAndDeleteMsg(client, messageInstance, who, content);\r\n  }\r\n};\r\n\r\nconst sorryMsg = `Sorry ${\r\n  GREETINGS.member[random(GREETINGS.memberMsgNumber)]\r\n}\\nOnly one word is allowed after !notes command ${\r\n  HEY_EMOJIES[random(HEY_EMOJIES.length)]\r\n}`;\r\n\r\nconst invalidMsg =\r\n  \"The filter is invalid or notes are not updated with the respective subject, please wait for a while we will upload the respective notes soon\";\r\n\r\nexport const sendNotesByFilter = async (\r\n  client: WAWebJS.Client,\r\n  messageBody: string,\r\n  messageInstance: WAWebJS.Message,\r\n  who: MessageType\r\n) => {\r\n  const msgList = messageBody.split(\" \");\r\n  if (who !== \"NONE\") {\r\n    const chats = await client.getChats();\r\n    const bot = chats[BOT];\r\n    if (msgList.length > 2) {\r\n      bot.sendMessage(sorryMsg);\r\n    } else {\r\n      // First check in the Names\r\n      const filteredNotes = NOTES.filter((note) => {\r\n        return note.name\r\n          .toLocaleLowerCase()\r\n          .includes(msgList[1].toLocaleLowerCase());\r\n      });\r\n\r\n      // If not in the Upper Names, check inside\r\n      if (!filteredNotes.length) {\r\n        NOTES.forEach((note) => {\r\n          note.content.filter((contNote) => {\r\n            if (\r\n              contNote.name\r\n                .toLocaleLowerCase()\r\n                .includes(msgList[1].toLocaleLowerCase())\r\n            ) {\r\n              filteredNotes.push(note);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      let content = userMsg;\r\n      if (!filteredNotes.length) {\r\n        bot.sendMessage(invalidMsg);\r\n      } else if (who === \"ADMIN\") {\r\n        content = notesFormatter(filteredNotes, content);\r\n        bot.sendMessage(content);\r\n      } else {\r\n        content = notesFormatter(filteredNotes, content);\r\n        sendAndDeleteMsg(client, messageInstance, who, content);\r\n      }\r\n\r\n      //     if (who === \"ADMIN\") {\r\n      //     } else {\r\n      //       let content = userMsg;\r\n      //       filteredNotes.forEach((note) => {\r\n      //         note.content.forEach((not) => {\r\n      //           content += `\\n\\nName of the Content: _${not.name}_\\nLink: ${not.link}`;\r\n      //         });\r\n      //       });\r\n      //       content += `\\n\\n: ${FOOTERS.footers[random(FOOTERS.footerMsgLength)]}`;\r\n      //       bot.sendMessage(content);\r\n      //     }\r\n      //   }\r\n      // } else if (who !== \"NONE\") {\r\n      //   if (msgList.length > 2) {\r\n      //     sendAndDeleteMsg(client, messageInstance, who, sorryMsg);\r\n      //   } else {\r\n      //     // First check in the Contents\r\n      //     const filteredNotes = NOTES.map((note) =>\r\n      //       note.content.filter((not) =>\r\n      //         not.name.toLocaleLowerCase().includes(msgList[1].toLocaleLowerCase())\r\n      //       )\r\n      //     );\r\n      //\r\n      //     // If not in the content, check in the upper names\r\n      //     if (!filteredNotes.flat().length) {\r\n      //       const filteredNotes = NOTES.filter((note) =>\r\n      //         note.name.toLocaleLowerCase().includes(msgList[1].toLocaleLowerCase())\r\n      //       );\r\n      //       let content = userMsg;\r\n      //       filteredNotes.forEach((note) => {\r\n      //         content += `\\n\\n*_NAME_* : *${note.name}*\\n\\n -----------*Content*------------`;\r\n      //         note.content.forEach((noteContent) => {\r\n      //           content += `\\n\\nName of the Content: _${noteContent.name}_\\nLink: ${noteContent.link}`;\r\n      //         });\r\n      //       });\r\n      //\r\n      //       if (!filteredNotes.length) {\r\n      //         sendAndDeleteMsg(client, messageInstance, who, invalidMsg);\r\n      //       } else {\r\n      //         content += `\\n\\n: ${\r\n      //           FOOTERS.footers[random(FOOTERS.footerMsgLength)]\r\n      //         }`;\r\n      //         sendAndDeleteMsg(client, messageInstance, who, content);\r\n      //       }\r\n      //     } else {\r\n      //       let content = userMsg;\r\n      //       filteredNotes.forEach((note) => {\r\n      //         note.forEach((not) => {\r\n      //           content += `\\n\\nName of the Content: _${not.name}_\\nLink: ${not.link}`;\r\n      //         });\r\n      //       });\r\n      //       content += `\\n\\n: ${FOOTERS.footers[random(FOOTERS.footerMsgLength)]}`;\r\n      //       sendAndDeleteMsg(client, messageInstance, who, content);\r\n      //     }\r\n    }\r\n  }\r\n};\r\n"],
  "mappings": "mlBAAA,qDACA,MAAoB,iBACpB,EAAsB,iCAEtB,EAAwB,qCACxB,EAAuC,qCACvC,EAAiC,iCACjC,EAAuB,4BAGvB,KAAM,GAAiB,CAAC,EAAc,IACpC,GAAM,QAAQ,AAAC,GAAS,CACtB,GAAW;AAAA;AAAA,cAAmB,EAAK;AAAA;AAAA,mCACnC,EAAK,QAAQ,QAAQ,AAAC,GAAgB,CACpC,GAAW;AAAA;AAAA,sBAA2B,EAAY;AAAA,QAAgB,EAAY,WAGlF,GAAW;AAAA;AAAA,IAAS,UAAQ,QAAQ,aAAO,UAAQ,oBAC5C,GAGT,GAAI,GAAW,wBACb,YAAU,MAAM,aAAO,YAAU,qBAC9B,cAAY,aAAO,cAAY,WAEhC,EAAU,wBACZ,YAAU,OAAO,aAAO,YAAU,sBAElC,cAAY,aAAO,cAAY;AAAA;AAAA;AAAA;AAAA;AAAA,uKAI1B,KAAM,GAAY,MACvB,EACA,EACA,IACG,CACH,GAAI,GAAU,IAAQ,QAAU,EAAW,EAC3C,EAAU,EAAe,QAAO,GAChC,AAAI,IAAQ,QAGV,AADY,AADE,MAAM,GAAO,YACT,OACd,YAAY,GACP,IAAQ,QACjB,uBAAiB,EAAQ,EAAiB,EAAK,IAI7C,EAAW,SACf,YAAU,OAAO,aAAO,YAAU;AAAA,gDAElC,cAAY,aAAO,cAAY,WAG3B,EACJ,+IAEW,EAAoB,MAC/B,EACA,EACA,EACA,IACG,CACH,KAAM,GAAU,EAAY,MAAM,KAClC,GAAI,IAAQ,OAAQ,CAElB,KAAM,GAAM,AADE,MAAM,GAAO,YACT,OAClB,GAAI,EAAQ,OAAS,EACnB,EAAI,YAAY,OACX,CAEL,KAAM,GAAgB,QAAM,OAAO,AAAC,GAC3B,EAAK,KACT,oBACA,SAAS,EAAQ,GAAG,sBAIzB,AAAK,EAAc,QACjB,QAAM,QAAQ,AAAC,GAAS,CACtB,EAAK,QAAQ,OAAO,AAAC,GAAa,CAChC,AACE,EAAS,KACN,oBACA,SAAS,EAAQ,GAAG,sBAEvB,EAAc,KAAK,OAK3B,GAAI,GAAU,EACd,AAAK,EAAc,OAEZ,AAAI,IAAQ,QACjB,GAAU,EAAe,EAAe,GACxC,EAAI,YAAY,IAEhB,GAAU,EAAe,EAAe,GACxC,uBAAiB,EAAQ,EAAiB,EAAK,IAN/C,EAAI,YAAY",
  "names": []
}
