{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import * as WAWebJS from \"whatsapp-web.js\";\nimport {\n  Client,\n  GroupNotification,\n  LocalAuth,\n  MessageMedia,\n} from \"whatsapp-web.js\";\nimport qrcode = require(\"qrcode-terminal\");\nimport { checkMessage, superCmdFilter } from \"./actions/messageActions\";\nimport { main } from \"./controllers/main\";\nimport { introduction, sendCommands } from \"./actions/introduction\";\nimport {\n  GREETINGS,\n  HEY_EMOJIES,\n  USER_JOIN_GREETINGS,\n} from \"./utils/reply/replies\";\nimport { random } from \"./actions/sendMessage\";\nimport express from \"express\";\nimport * as dotenv from \"dotenv\";\nimport { Request, Response } from \"express\";\nimport { COMMANDS_CMDS } from \"./utils/Commands/instructions\";\nimport { grpLeaveStickers } from \"./assets/assets\";\nimport { log } from \"./utils/log\";\nimport { MessageType, WA_Grp } from \"./types/types\";\nimport { sendAndDeleteMsg } from \"./actions/sendAndDeleteMsg\";\nimport { pingEveryone } from \"./actions/pingEveryone\";\nimport { addUser, increaseNumberOfCmd, removeUser } from \"./services/mongo\";\nimport { connectToDb } from \"./utils/db/connect\";\nimport { removeMember } from \"./actions/removeMember\";\n// @ts-ignore\nimport {\n  GrpJoinNotification,\n  GrpLeaveNotification,\n  MessageTypeOfWA,\n} from \"./utils/returnTypeOfWA\";\nimport { sendClassNotification } from \"./actions/sendClassNotification\";\ndotenv.config();\n\n// Initialized App\nconst app = express();\n\n// For Development Enviornment\nconst LOCAL = String(process.env.dev) === \"true\";\nexport const BOT = LOCAL ? 1 : 0;\nexport const WA_BOT_ID = LOCAL\n  ? (process.env.WA_BOT_ID_DEV as string)\n  : (process.env.WA_BOT_ID as string);\n\nconst DB_URL = LOCAL\n  ? (process.env.DEV_DB_URL as string)\n  : (process.env.PROD_DB_URL as string);\n\n// Connect To DB\nconnectToDb(DB_URL);\n\n// Initializing Client\nconst client = new Client({\n  puppeteer: {\n    headless: true,\n    args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\n  },\n  authStrategy: new LocalAuth({\n    dataPath: `${__dirname}/sessions`,\n  }),\n});\n\n// For QR Code\nclient.on(\"qr\", (qr: string) => {\n  qrcode.generate(qr, { small: true });\n  console.log(qr);\n});\n\n// Event \"READY\"\nclient.on(\"ready\", async () => {\n  log({ msg: \"Client Connected\", type: \"CONNECTED\", error: false });\n  client.sendMessage(\n    process.env.WA_BOT_ID_DEV as string,\n    `${process.env.BOT_NAME as string}: I am Connected BOSS`\n  );\n});\n\n/**\n * INFO:\n * Event \"MESSAGE_CREATE\"\n * @returns { MessageTypeOfWA }\n */\nclient.on(\"message_create\", async (message: WAWebJS.Message) => {\n  // Check if message is from Group or Not, if yes, who contains whoean or userID\n  const userObj: MessageType = await checkMessage(message);\n  // Mention Logic\n  const str: string[] = message.mentionedIds;\n  const isMention =\n    (message.body[0] === \"@\" &&\n      str.includes(\"919871453667@c.us\")) ||\n    message.body\n      .toLowerCase()\n      .split(\" \")\n      .includes(`@${(process.env.BOT_NAME as String).toLocaleLowerCase()}`);\n  if (\n    isMention &&\n    userObj.role !== \"NONE\" &&\n    message.body.split(\" \").length === 1\n  ) {\n    introduction(client, userObj, message);\n  }\n  let allChats = await client.getChats();\n  const WA_BOT: WA_Grp = allChats[BOT];\n\n  const cmd = message.body.split(\",\")[0].toLocaleLowerCase();\n\n  // Command check logic\n  if (COMMANDS_CMDS.includes(cmd)) {\n    sendCommands(client, message, userObj);\n    await increaseNumberOfCmd({ recipitantId: userObj.chatId });\n    return;\n  }\n  if (userObj.role === \"STUDENT\" && superCmdFilter(message.body)) {\n    WA_BOT.sendMessage(\n      \"You cannot perform this action, because you are not a BOT ADMIN, you will get ban if you use this frequently :)\"\n    );\n    return;\n  }\n\n  if (userObj.role !== \"NONE\" && superCmdFilter(message.body)) {\n    console.log(\"entering removing\");\n    await removeMember(WA_BOT as WAWebJS.GroupChat, userObj, message);\n    return;\n  }\n\n  // Ping Everyone\n  if (userObj.role === \"OWNER\" && [\"everyone\"].includes(message.body)) {\n    await pingEveryone(client, message);\n    return;\n  }\n\n  // Checks if message's first letter is BOT_PREFIX\n  if (\n    userObj.role !== \"NONE\" &&\n    message.body[0] === (process.env.BOT_PREFIX as string)\n  ) {\n    await main(client, message, userObj);\n    return;\n  }\n  // WARN: ONLY USE ONCE\n  if (userObj.role === \"OWNER\" && message.body === \"load\") {\n    WA_BOT.participants?.forEach(async (participant) => {\n      let recipitantId = participant.id._serialized;\n      await addUser({ recipitantId });\n    });\n    allChats[1].sendMessage(\n      \"SUCCESSFULLY ADDED ALL THE STUDENTS IN THE DB, MASTER!\"\n    );\n    return;\n  }\n});\n\n/**\n * INFO:\n * Event \"GROUP_JOIN\"\n * @returns { GrpJoinNotification }\n */\nclient.on(\"group_join\", async (msg: GroupNotification) => {\n  if (msg.chatId === WA_BOT_ID) {\n    log({\n      msg: `${msg.recipientIds[0]} Joined the Group`,\n      type: \"GROUP_JOIN\",\n      error: false,\n    });\n    const contact = await client.getNumberId(msg.recipientIds[0]);\n    const details = await client.getContactById(contact?._serialized || \"\");\n    if (details.name) {\n      sendAndDeleteMsg(\n        client,\n        msg,\n        msg.recipientIds[0],\n        `${process.env.BOT_NAME as String}: *${\n          details.name\n        }* Thanks for joining the Group!\\n${\n          USER_JOIN_GREETINGS.messages[random(USER_JOIN_GREETINGS.messageNum)]\n        }\\nHey new ${GREETINGS.member[random(GREETINGS.memberMsgNumber)]} ${\n          HEY_EMOJIES[random(HEY_EMOJIES.length)]\n        }!\\nCheck out what bot(${\n          process.env.BOT_NAME as String\n        }) can do by *Mentioning* me!\\nor check the Commands of ${\n          process.env.BOT_NAME as String\n        } by typing\\n*${\n          process.env.BOT_PREFIX as string\n        }AllCmds*\\n*IN THE GROUP*\\nSimply watch the Video: https://drive.google.com/file/d/1tl33VralV0AXQ2EDJYnjC6r2eaCUHr-l/view?usp=sharing`\n      );\n\n      // const sticker = MessageMedia.fromFilePath(\n      //   `${__dirname}/assets/images/grpJoinLeaveImgs/${\n      //     grpJoinStickers.images[random(grpJoinStickers.numOfImgs)]\n      //   }.png`\n      // );\n      // client.sendMessage(msg.recipientIds[0], sticker, {\n      //   sendMediaAsSticker: true,\n      // });\n    } else {\n      sendAndDeleteMsg(\n        client,\n        msg,\n        msg.recipientIds[0],\n        `${process.env.BOT_NAME as String}: ${\n          GREETINGS.member[random(GREETINGS.memberMsgNumber)]\n        }, Thanks for Joining the Group!\\n${\n          USER_JOIN_GREETINGS.messages[random(USER_JOIN_GREETINGS.messageNum)]\n        }\\nHey new ${GREETINGS.member[random(GREETINGS.memberMsgNumber)]} ${\n          HEY_EMOJIES[random(HEY_EMOJIES.length)]\n        }!\\nCheck out what bot(${\n          process.env.BOT_NAME as String\n        }) can do by *Mentioning* me!\\nor check the Commands of ${\n          process.env.BOT_NAME as String\n        } by typing\\n*${\n          process.env.BOT_PREFIX as string\n        }AllCmds*\\n*IN THE GROUP*\\nSimply watch the Video: https://drive.google.com/file/d/1tl33VralV0AXQ2EDJYnjC6r2eaCUHr-l/view?usp=sharing`\n      );\n      // const sticker = MessageMedia.fromFilePath(\n      //   `${__dirname}/assets/images/grpJoinLeaveImgs/${\n      //     grpJoinStickers.images[random(grpJoinStickers.numOfImgs)]\n      //   }.png`\n      // );\n      // client.sendMessage(msg.recipientIds[0], sticker, {\n      //   sendMediaAsSticker: true,\n      // });\n    }\n    const recipitantId = msg.recipientIds[0];\n    await addUser({ recipitantId });\n  }\n});\n\n/**\n * INFO:\n * Event \"GROUP_LEAVE\"\n * @returns { GrpLeaveNotification }\n */\nclient.on(\"group_leave\", async (notification: WAWebJS.GroupNotification) => {\n  let grpId = notification.chatId;\n  if (grpId === WA_BOT_ID) {\n    log({\n      msg: `${notification.recipientIds[0]} left the Group`,\n      type: \"GROUP_LEFT\",\n      error: false,\n    });\n  }\n  if (notification.chatId === WA_BOT_ID && notification.type !== \"remove\") {\n    const sticker = MessageMedia.fromFilePath(\n      `${__dirname}/../src/assets/images/grpJoinLeaveImgs/${\n        grpLeaveStickers.images[random(grpLeaveStickers.numOfImgs)]\n      }.png`\n    );\n    const allChats = await client.getChats();\n    const WA_BOT = allChats[BOT];\n    WA_BOT.sendMessage(`${process.env.BOT_NAME as String}: somebody left`);\n    WA_BOT.sendMessage(sticker, { sendMediaAsSticker: true });\n  }\n  const recipitantId = notification.recipientIds[0];\n  await removeUser({ recipitantId });\n});\n\n// For checking the classes\nsetInterval(async () => {\n  const chats = await client.getChats();\n  const WA_BOT: WA_Grp = chats[BOT];\n  sendClassNotification(WA_BOT);\n  log({ msg: \"Checked\", type: \"INFO\", error: false });\n}, 5 * 60 * 1000); // every 5 minutes\n\nclient.initialize();\n\n// Get Bot LIVE\n// Continuously ping the server to prevent it from becoming idle\n// const intervalId = setInterval(async () => {\n//   await axios.get(\"https://iitm-wa-bot.onrender.com/\");\n//   console.log(\"[SERVER] Pinged server\");\n// }, 14 * 60 * 1000); // every 14 minutes\n//\n// // To stop the bot at Night\n// const etaMs = endOfToday().getTime() - addIndianTime(new Date()).getTime();\n// setInterval(() => {\n//   clearInterval(intervalId);\n// }, etaMs);\n\nconst port = Number(process.env.PORT) || 3005;\n\napp.get(\"/\", (_: Request, res: Response) => {\n  res.send(\"BOT\");\n});\napp.listen(port, () =>\n  log({\n    msg: `[SERVER] Server is running on port ${port}`,\n    type: \"INFO\",\n    error: false,\n  })\n);\n\n// All other pages should be returned as error pages\napp.all(\"*\", (_: Request, res: Response) => {\n  res\n    .status(404)\n    .send(\n      \"<h1>Sorry, this page does not exist!</h1><br><a href='/'>Back to Home</a>\"\n    );\n});\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "BOT", "WA_BOT_ID", "__toCommonJS", "import_whatsapp_web", "import_messageActions", "import_main", "import_introduction", "import_replies", "import_sendMessage", "import_express", "dotenv", "import_instructions", "import_assets", "import_log", "import_sendAndDeleteMsg", "import_pingEveryone", "import_mongo", "import_connect", "import_removeMember", "import_sendClassNotification", "qrcode", "app", "express", "LOCAL", "DB_URL", "client", "qr", "message", "_a", "userObj", "str", "allChats", "WA_BOT", "cmd", "participant", "recipitantId", "msg", "contact", "details", "notification", "sticker", "port", "_", "res"]
}
