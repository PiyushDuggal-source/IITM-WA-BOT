{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import * as WAWebJS from \"whatsapp-web.js\";\r\nimport {\r\n  Client,\r\n  GroupNotification,\r\n  LocalAuth,\r\n  MessageMedia,\r\n} from \"whatsapp-web.js\";\r\nimport qrcode = require(\"qrcode-terminal\");\r\nimport { checkMessage } from \"./actions/messageActions\";\r\nimport { main } from \"./controllers/main\";\r\nimport { introduction, sendCommands } from \"./actions/introduction\";\r\nimport {\r\n  GREETINGS,\r\n  HEY_EMOJIES,\r\n  USER_JOIN_GREETINGS,\r\n} from \"./utils/reply/replies\";\r\nimport { random } from \"./actions/sendMessage\";\r\nconst express = require(\"express\");\r\nimport * as dotenv from \"dotenv\";\r\nimport { Request, Response } from \"express\";\r\nimport { COMMANDS_CMDS } from \"./utils/Commands/instructions\";\r\nimport { sendClassNotification } from \"./actions/sendClassNotification\";\r\nimport { grpLeaveStickers } from \"./assets/assets\";\r\nimport { log } from \"./utils/log\";\r\nimport { MessageType, WA_Grp } from \"./types/types\";\r\nimport { UserModel } from \"./services/models\";\r\n// import axios from \"axios\";\r\n// import { endOfToday } from \"date-fns\";\r\nimport { sendAndDeleteMsg } from \"./actions/sendAndDeleteMsg\";\r\nimport { pingEveryone } from \"./actions/pingEveryone\";\r\nimport { connectToDb } from \"./utils/db/connect\";\r\ndotenv.config();\r\n\r\n// Initialized App\r\nconst app = express();\r\n\r\n// For Development Enviornment\r\nconst LOCAL = String(process.env.dev) === \"true\";\r\nexport const BOT = LOCAL ? 1 : 0;\r\nexport const WA_BOT_ID = LOCAL\r\n  ? (process.env.WA_BOT_ID_DEV as string)\r\n  : (process.env.WA_BOT_ID as string);\r\n\r\nconst DB_URL = LOCAL\r\n  ? (process.env.DEV_DB_URL as string)\r\n  : (process.env.PROD_DB_URL as string);\r\n\r\n// Connecting to DB\r\n(async () => {\r\n  await connectToDb(DB_URL);\r\n})();\r\n\r\n// Initializing Client\r\nconst client = new Client({\r\n  puppeteer: {\r\n    headless: true,\r\n    args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\r\n  },\r\n  authStrategy: new LocalAuth({\r\n    dataPath: `${__dirname}/sessions`,\r\n  }),\r\n});\r\n\r\n// For QR Code\r\nclient.on(\"qr\", (qr: string) => {\r\n  qrcode.generate(qr, { small: true });\r\n  console.log(qr);\r\n});\r\n\r\n// Event \"READY\"\r\nclient.on(\"ready\", async () => {\r\n  log({ msg: \"Client Connected\", type: \"CONNECTED\", error: false });\r\n  client.sendMessage(\r\n    process.env.WA_BOT_ID_DEV as string,\r\n    `${process.env.BOT_NAME as string}: I am Connected BOSS`\r\n  );\r\n});\r\n\r\n// Event \"MESSAGE_CREATE\"\r\nclient.on(\"message_create\", async (message: WAWebJS.Message) => {\r\n  // Check if message is from Group or Not, if yes, who contains whoean or userID\r\n  const who: MessageType = checkMessage(message);\r\n  // Mention Logic\r\n  const str: string[] = message.mentionedIds;\r\n  const isMention =\r\n    (message.body[0] === \"@\" && str.includes(\"919871453667@c.us\")) ||\r\n    message.body\r\n      .toLowerCase()\r\n      .split(\" \")\r\n      .includes(`@${(process.env.BOT_NAME as String).toLocaleLowerCase()}`);\r\n  if (isMention && who !== \"NONE\" && message.body.split(\" \").length === 1) {\r\n    introduction(client, who, message);\r\n  }\r\n\r\n  let allChats = await client.getChats();\r\n  const WA_BOT: WA_Grp = allChats[BOT];\r\n\r\n  // Command check logic\r\n  if (\r\n    who !== \"NONE\" &&\r\n    COMMANDS_CMDS.includes(message.body.split(\",\")[0].toLocaleLowerCase())\r\n  ) {\r\n    sendCommands(client, message, who);\r\n  }\r\n\r\n  // Ping Everyone\r\n  if (who == \"ADMIN\" && [\"everyone\"].includes(message.body)) {\r\n    await pingEveryone(client, message);\r\n  }\r\n\r\n  // Checks if message's first letter is BOT_PREFIX\r\n  if (\r\n    who !== \"NONE\" &&\r\n    message.body[0] === (process.env.BOT_PREFIX as string)\r\n  ) {\r\n    await main(client, message, who);\r\n  }\r\n  // !@onlyUseOnce ONLY USE ONCE\r\n  if (who === \"ADMIN\" && message.body === \"load\") {\r\n    console.log(WA_BOT.participants);\r\n    WA_BOT.participants?.forEach(async (participant) => {\r\n      UserModel.create({\r\n        name: participant.id.user,\r\n        chatId: participant.id._serialized,\r\n      });\r\n    });\r\n    WA_BOT.sendMessage(\r\n      \"SUCCESSFULLY ADDED ALL THE STUDENTS IN THE DB, MASTER!\"\r\n    );\r\n  }\r\n});\r\n\r\n// Event \"GROUP_JOIN\"\r\nclient.on(\"group_join\", async (msg: GroupNotification) => {\r\n  if (msg.chatId === (process.env.WA_BOT_ID as string)) {\r\n    log({\r\n      msg: `${msg.recipientIds[0]} Joined the Group`,\r\n      type: \"GROUP_JOIN\",\r\n      error: false,\r\n    });\r\n  }\r\n  if (msg.chatId === WA_BOT_ID) {\r\n    const contact = await client.getNumberId(msg.recipientIds[0]);\r\n    const details = await client.getContactById(contact?._serialized || \"\");\r\n    if (details.name) {\r\n      sendAndDeleteMsg(\r\n        client,\r\n        msg,\r\n        msg.recipientIds[0],\r\n        `${process.env.BOT_NAME as String}: *${\r\n          details.name\r\n        }* Thanks for joining the Group!\\n${\r\n          USER_JOIN_GREETINGS.messages[random(USER_JOIN_GREETINGS.messageNum)]\r\n        }\\nHey new ${GREETINGS.member[random(GREETINGS.memberMsgNumber)]} ${\r\n          HEY_EMOJIES[random(HEY_EMOJIES.length)]\r\n        }!\\nCheck out what bot(${\r\n          process.env.BOT_NAME as String\r\n        }) can do by *Mentioning* me!\\nor check the Commands of ${\r\n          process.env.BOT_NAME as String\r\n        } by typing\\n*${\r\n          process.env.BOT_PREFIX as string\r\n        }AllCmds*\\n*IN THE GROUP*\\nSimply watch the Video: https://drive.google.com/file/d/1tl33VralV0AXQ2EDJYnjC6r2eaCUHr-l/view?usp=sharing`\r\n      );\r\n\r\n      // const sticker = MessageMedia.fromFilePath(\r\n      //   `${__dirname}/assets/images/grpJoinLeaveImgs/${\r\n      //     grpJoinStickers.images[random(grpJoinStickers.numOfImgs)]\r\n      //   }.png`\r\n      // );\r\n      // client.sendMessage(msg.recipientIds[0], sticker, {\r\n      //   sendMediaAsSticker: true,\r\n      // });\r\n    } else {\r\n      sendAndDeleteMsg(\r\n        client,\r\n        msg,\r\n        msg.recipientIds[0],\r\n        `${process.env.BOT_NAME as String}: ${\r\n          GREETINGS.member[random(GREETINGS.memberMsgNumber)]\r\n        }, Thanks for Joining the Group!\\n${\r\n          USER_JOIN_GREETINGS.messages[random(USER_JOIN_GREETINGS.messageNum)]\r\n        }\\nHey new ${GREETINGS.member[random(GREETINGS.memberMsgNumber)]} ${\r\n          HEY_EMOJIES[random(HEY_EMOJIES.length)]\r\n        }!\\nCheck out what bot(${\r\n          process.env.BOT_NAME as String\r\n        }) can do by *Mentioning* me!\\nor check the Commands of ${\r\n          process.env.BOT_NAME as String\r\n        } by typing\\n*${\r\n          process.env.BOT_PREFIX as string\r\n        }AllCmds*\\n*IN THE GROUP*\\nSimply watch the Video: https://drive.google.com/file/d/1tl33VralV0AXQ2EDJYnjC6r2eaCUHr-l/view?usp=sharing`\r\n      );\r\n      // const sticker = MessageMedia.fromFilePath(\r\n      //   `${__dirname}/assets/images/grpJoinLeaveImgs/${\r\n      //     grpJoinStickers.images[random(grpJoinStickers.numOfImgs)]\r\n      //   }.png`\r\n      // );\r\n      // client.sendMessage(msg.recipientIds[0], sticker, {\r\n      //   sendMediaAsSticker: true,\r\n      // });\r\n    }\r\n  }\r\n});\r\n\r\n// GroupNotification {\r\n//   id: {\r\n//     fromMe: boolean,\r\n//     remote: '1203630xxxxxxxxx@g.us',\r\n//     id: '26650709261xxxxxxxxxx',\r\n//     participant: '919990xxxxxxxx@c.us',\r\n//     _serialized: 'false_12036xxxxxxxxxxxxx475@g.us_2665xxxxxxxxxxxx72395334_91xxxxxxxxxxxxx656@c.us'\r\n//   },\r\n//   body: '',\r\n//   type: 'invite',\r\n//   timestamp: 1672395334,\r\n//   chatId: '1203630442xxxxxxxxx@g.us',\r\n//   author: undefined,\r\n//   recipientIds: [ '9199902xxxxxxxxx@c.us' ]\r\n// }\r\nclient.on(\"group_leave\", async (notification: WAWebJS.GroupNotification) => {\r\n  let grpId = notification.chatId;\r\n  if (grpId === (process.env.WA_BOT_ID as string)) {\r\n    log({\r\n      msg: `${notification.recipientIds[0]} left the Group`,\r\n      type: \"GROUP_LEFT\",\r\n      error: false,\r\n    });\r\n  }\r\n  const sticker = MessageMedia.fromFilePath(\r\n    `${__dirname}/../src/assets/images/grpJoinLeaveImgs/${\r\n      grpLeaveStickers.images[random(grpLeaveStickers.numOfImgs)]\r\n    }.png`\r\n  );\r\n  if (notification.chatId === WA_BOT_ID) {\r\n    const allChats = await client.getChats();\r\n    const WA_BOT = allChats[BOT];\r\n    WA_BOT.sendMessage(`${process.env.BOT_NAME as String}: somebody left`);\r\n    WA_BOT.sendMessage(sticker, { sendMediaAsSticker: true });\r\n  }\r\n  await UserModel.findOneAndDelete({ chatId: notification.chatId });\r\n});\r\n\r\n// For checking the classes\r\nsetInterval(async () => {\r\n  const chats = await client.getChats();\r\n  const WA_BOT: WA_Grp = chats[BOT];\r\n  sendClassNotification(WA_BOT);\r\n  log({ msg: \"Checked\", type: \"INFO\", error: false });\r\n}, 5 * 60 * 1000); // every 5 minutes\r\n\r\nclient.initialize();\r\n\r\n// Get Bot LIVE\r\n// Continuously ping the server to prevent it from becoming idle\r\n// const intervalId = setInterval(async () => {\r\n//   await axios.get(\"https://iitm-wa-bot.onrender.com/\");\r\n//   console.log(\"[SERVER] Pinged server\");\r\n// }, 14 * 60 * 1000); // every 14 minutes\r\n//\r\n// // To stop the bot at Night\r\n// const etaMs = endOfToday().getTime() - addIndianTime(new Date()).getTime();\r\n// setInterval(() => {\r\n//   clearInterval(intervalId);\r\n// }, etaMs);\r\n\r\nconst port = Number(process.env.PORT) || 3005;\r\n\r\napp.get(\"/\", (_: Request, res: Response) => {\r\n  res.send(\"BOT\");\r\n});\r\napp.listen(port, () =>\r\n  log({\r\n    msg: `[SERVER] Server is running on port ${port}`,\r\n    type: \"INFO\",\r\n    error: false,\r\n  })\r\n);\r\n\r\n// All other pages should be returned as error pages\r\napp.all(\"*\", (_: Request, res: Response) => {\r\n  res\r\n    .status(404)\r\n    .send(\r\n      \"<h1>Sorry, this page does not exist!</h1><br><a href='/'>Back to Home</a>\"\r\n    );\r\n});\r\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "BOT", "WA_BOT_ID", "__toCommonJS", "import_whatsapp_web", "import_messageActions", "import_main", "import_introduction", "import_replies", "import_sendMessage", "dotenv", "import_instructions", "import_sendClassNotification", "import_assets", "import_log", "import_models", "import_sendAndDeleteMsg", "import_pingEveryone", "import_connect", "qrcode", "express", "app", "LOCAL", "DB_URL", "client", "qr", "message", "_a", "who", "str", "WA_BOT", "participant", "msg", "contact", "details", "notification", "sticker", "port", "_", "res"]
}
