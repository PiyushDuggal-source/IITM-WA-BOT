{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import * as WAWebJS from \"whatsapp-web.js\";\nimport {\n  Client,\n  GroupNotification,\n  LocalAuth,\n  MessageMedia,\n} from \"whatsapp-web.js\";\nimport qrcode = require(\"qrcode-terminal\");\nimport { checkMessage } from \"./actions/messageActions\";\nimport { main } from \"./controllers/main\";\nimport { introduction, sendCommands } from \"./actions/introduction\";\nimport {\n  GREETINGS,\n  HEY_EMOJIES,\n  USER_JOIN_GREETINGS,\n} from \"./utils/reply/replies\";\nimport { random } from \"./actions/sendMessage\";\nconst express = require(\"express\");\nimport * as dotenv from \"dotenv\";\nimport { Request, Response } from \"express\";\nimport { COMMANDS_CMDS } from \"./utils/Commands/instructions\";\n// import {\n//   addIndianTime,\n//   sendClassNotification,\n// } from \"./actions/sendClassNotification\";\nimport { grpLeaveStickers } from \"./assets/assets\";\nimport { log } from \"./utils/log\";\nimport { MessageType, WA_Grp } from \"./types/types\";\nimport { UserModel } from \"./services/modals\";\nimport mongoose from \"mongoose\";\n// import axios from \"axios\";\n// import { endOfToday } from \"date-fns\";\nimport { sendAndDeleteMsg } from \"./actions/sendAndDeleteMsg\";\nimport { pingEveryone } from \"./actions/pingEveryone\";\ndotenv.config();\n\n// Initialized App\nconst app = express();\n\n// For Development Enviornment\nconst LOCAL = String(process.env.dev) === \"true\";\nexport const BOT = LOCAL ? 1 : 0;\nexport const WA_BOT_ID = LOCAL\n  ? (process.env.WA_BOT_ID_DEV as string)\n  : (process.env.WA_BOT_ID as string);\n\nconst DB_URL = LOCAL\n  ? (process.env.DEV_DB_URL as string)\n  : (process.env.PROD_DB_URL as string);\n\n// Initializing Client\nmongoose\n  .connect(DB_URL)\n  .then(() => {\n    console.log(\"connected to DB\");\n    const client = new Client({\n      puppeteer: {\n        headless: true,\n        args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\n      },\n      authStrategy: new LocalAuth({\n        dataPath: `${__dirname}/sessions`,\n      }),\n    });\n\n    // For QR Code\n    client.on(\"qr\", (qr: string) => {\n      qrcode.generate(qr, { small: true });\n      console.log(qr);\n    });\n\n    // Event \"READY\"\n    client.on(\"ready\", async () => {\n      log({ msg: \"Client Connected\", type: \"CONNECTED\", error: false });\n      client.sendMessage(\n        process.env.WA_BOT_ID_DEV as string,\n        `${process.env.BOT_NAME as string}: I am Connected BOSS`\n      );\n    });\n\n    // Event \"MESSAGE_CREATE\"\n    client.on(\"message_create\", async (message: WAWebJS.Message) => {\n      // Check if message is from Group or Not, if yes, who contains whoean or userID\n      const who: MessageType = checkMessage(message);\n      // Mention Logic\n      const str: string[] = message.mentionedIds;\n      const isMention =\n        (message.body[0] === \"@\" && str.includes(\"919871453667@c.us\")) ||\n        message.body\n          .toLowerCase()\n          .split(\" \")\n          .includes(`@${(process.env.BOT_NAME as String).toLocaleLowerCase()}`);\n      if (isMention && who !== \"NONE\" && message.body.split(\" \").length === 1) {\n        introduction(client, who, message);\n      }\n\n      let allChats = await client.getChats();\n      const WA_BOT: WA_Grp = allChats[BOT];\n\n      // Command check logic\n      if (\n        who !== \"NONE\" &&\n        COMMANDS_CMDS.includes(message.body.split(\",\")[0].toLocaleLowerCase())\n      ) {\n        sendCommands(client, message, who);\n      }\n\n      // Ping Everyone\n      if (who == \"ADMIN\" && [\"everyone\"].includes(message.body)) {\n        await pingEveryone(client, message);\n      }\n\n      // Checks if message's first letter is BOT_PREFIX\n      if (\n        who !== \"NONE\" &&\n        message.body[0] === (process.env.BOT_PREFIX as string)\n      ) {\n        await main(client, message, who);\n      }\n      // !@onlyUseOnce ONLY USE ONCE\n      if (who === \"ADMIN\" && message.body === \"load\") {\n        console.log(WA_BOT.participants);\n        WA_BOT.participants?.forEach(async (participant) => {\n          UserModel.create({\n            name: participant.id.user,\n            chatId: participant.id._serialized,\n          });\n        });\n        WA_BOT.sendMessage(\n          \"SUCCESSFULLY ADDED ALL THE STUDENTS IN THE DB, MASTER!\"\n        );\n      }\n    });\n\n    // Event \"GROUP_JOIN\"\n    client.on(\"group_join\", async (msg: GroupNotification) => {\n      if (msg.chatId === (process.env.WA_BOT_ID as string)) {\n        log({\n          msg: `${msg.recipientIds[0]} Joined the Group`,\n          type: \"GROUP_JOIN\",\n          error: false,\n        });\n      }\n      if (msg.chatId === WA_BOT_ID) {\n        const contact = await client.getNumberId(msg.recipientIds[0]);\n        const details = await client.getContactById(contact?._serialized || \"\");\n        if (details.name) {\n          sendAndDeleteMsg(\n            client,\n            msg,\n            msg.recipientIds[0],\n            `${process.env.BOT_NAME as String}: *${\n              details.name\n            }* Thanks for joining the Group!\\n${\n              USER_JOIN_GREETINGS.messages[\n                random(USER_JOIN_GREETINGS.messageNum)\n              ]\n            }\\nHey new ${GREETINGS.member[random(GREETINGS.memberMsgNumber)]} ${\n              HEY_EMOJIES[random(HEY_EMOJIES.length)]\n            }!\\nCheck out what bot(${\n              process.env.BOT_NAME as String\n            }) can do by *Mentioning* me!\\nor check the Commands of ${\n              process.env.BOT_NAME as String\n            } by typing\\n*${\n              process.env.BOT_PREFIX as string\n            }AllCmds*\\n*IN THE GROUP*\\nSimply watch the Video: https://drive.google.com/file/d/1tl33VralV0AXQ2EDJYnjC6r2eaCUHr-l/view?usp=sharing`\n          );\n\n          // const sticker = MessageMedia.fromFilePath(\n          //   `${__dirname}/assets/images/grpJoinLeaveImgs/${\n          //     grpJoinStickers.images[random(grpJoinStickers.numOfImgs)]\n          //   }.png`\n          // );\n          // client.sendMessage(msg.recipientIds[0], sticker, {\n          //   sendMediaAsSticker: true,\n          // });\n        } else {\n          sendAndDeleteMsg(\n            client,\n            msg,\n            msg.recipientIds[0],\n            `${process.env.BOT_NAME as String}: ${\n              GREETINGS.member[random(GREETINGS.memberMsgNumber)]\n            }, Thanks for Joining the Group!\\n${\n              USER_JOIN_GREETINGS.messages[\n                random(USER_JOIN_GREETINGS.messageNum)\n              ]\n            }\\nHey new ${GREETINGS.member[random(GREETINGS.memberMsgNumber)]} ${\n              HEY_EMOJIES[random(HEY_EMOJIES.length)]\n            }!\\nCheck out what bot(${\n              process.env.BOT_NAME as String\n            }) can do by *Mentioning* me!\\nor check the Commands of ${\n              process.env.BOT_NAME as String\n            } by typing\\n*${\n              process.env.BOT_PREFIX as string\n            }AllCmds*\\n*IN THE GROUP*\\nSimply watch the Video: https://drive.google.com/file/d/1tl33VralV0AXQ2EDJYnjC6r2eaCUHr-l/view?usp=sharing`\n          );\n          // const sticker = MessageMedia.fromFilePath(\n          //   `${__dirname}/assets/images/grpJoinLeaveImgs/${\n          //     grpJoinStickers.images[random(grpJoinStickers.numOfImgs)]\n          //   }.png`\n          // );\n          // client.sendMessage(msg.recipientIds[0], sticker, {\n          //   sendMediaAsSticker: true,\n          // });\n        }\n      }\n    });\n\n    // GroupNotification {\n    //   id: {\n    //     fromMe: boolean,\n    //     remote: '1203630xxxxxxxxx@g.us',\n    //     id: '26650709261xxxxxxxxxx',\n    //     participant: '919990xxxxxxxx@c.us',\n    //     _serialized: 'false_12036xxxxxxxxxxxxx475@g.us_2665xxxxxxxxxxxx72395334_91xxxxxxxxxxxxx656@c.us'\n    //   },\n    //   body: '',\n    //   type: 'invite',\n    //   timestamp: 1672395334,\n    //   chatId: '1203630442xxxxxxxxx@g.us',\n    //   author: undefined,\n    //   recipientIds: [ '9199902xxxxxxxxx@c.us' ]\n    // }\n    client.on(\n      \"group_leave\",\n      async (notification: WAWebJS.GroupNotification) => {\n        let grpId = notification.chatId;\n        if (grpId === (process.env.WA_BOT_ID as string)) {\n          log({\n            msg: `${notification.recipientIds[0]} left the Group`,\n            type: \"GROUP_LEFT\",\n            error: false,\n          });\n        }\n        const sticker = MessageMedia.fromFilePath(\n          `${__dirname}/../src/assets/images/grpJoinLeaveImgs/${\n            grpLeaveStickers.images[random(grpLeaveStickers.numOfImgs)]\n          }.png`\n        );\n        if (notification.chatId === WA_BOT_ID) {\n          const allChats = await client.getChats();\n          const WA_BOT = allChats[BOT];\n          WA_BOT.sendMessage(\n            `${process.env.BOT_NAME as String}: somebody left`\n          );\n          WA_BOT.sendMessage(sticker, { sendMediaAsSticker: true });\n        }\n        await UserModel.findOneAndDelete({ chatId: notification.chatId });\n      }\n    );\n\n    // For checking the classes\n    // setInterval(async () => {\n    //   const chats = await client.getChats();\n    //   const WA_BOT: WA_Grp = chats[BOT];\n    //   sendClassNotification(WA_BOT);\n    //   log({ msg: \"Checked\", type: \"INFO\", error: false });\n    // }, 5 * 60 * 1000); // every 5 minutes\n\n    client.initialize();\n  })\n  .catch((err: any) => {\n    log({ msg: err, type: \"ERROR\", error: true });\n  });\n\n// Get Bot LIVE\n// Continuously ping the server to prevent it from becoming idle\n// const intervalId = setInterval(async () => {\n//   await axios.get(\"https://iitm-wa-bot.onrender.com/\");\n//   console.log(\"[SERVER] Pinged server\");\n// }, 14 * 60 * 1000); // every 14 minutes\n//\n// // To stop the bot at Night\n// const etaMs = endOfToday().getTime() - addIndianTime(new Date()).getTime();\n// setInterval(() => {\n//   clearInterval(intervalId);\n// }, etaMs);\n\nconst port = Number(process.env.PORT) || 3005;\n\napp.get(\"/\", (_: Request, res: Response) => {\n  res.send(\"BOT\");\n});\napp.listen(port, () =>\n  log({\n    msg: `[SERVER] Server is running on port ${port}`,\n    type: \"INFO\",\n    error: false,\n  })\n);\n\n// All other pages should be returned as error pages\napp.all(\"*\", (_: Request, res: Response) => {\n  res\n    .status(404)\n    .send(\n      \"<h1>Sorry, this page does not exist!</h1><br><a href='/'>Back to Home</a>\"\n    );\n});\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "BOT", "WA_BOT_ID", "__toCommonJS", "import_whatsapp_web", "import_messageActions", "import_main", "import_introduction", "import_replies", "import_sendMessage", "dotenv", "import_instructions", "import_assets", "import_log", "import_modals", "import_mongoose", "import_sendAndDeleteMsg", "import_pingEveryone", "qrcode", "express", "app", "LOCAL", "DB_URL", "mongoose", "client", "qr", "message", "_a", "who", "str", "WA_BOT", "participant", "msg", "contact", "details", "notification", "sticker", "err", "port", "_", "res"]
}
