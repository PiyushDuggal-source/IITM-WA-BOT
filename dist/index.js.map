{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import * as WAWebJS from \"whatsapp-web.js\";\r\nimport {\r\n  Client,\r\n  GroupNotification,\r\n  LocalAuth,\r\n  MessageMedia,\r\n  RemoteAuth,\r\n} from \"whatsapp-web.js\";\r\nimport qrcode = require(\"qrcode-terminal\");\r\nimport { checkMessage } from \"./actions/messageActions\";\r\nimport { main } from \"./controllers/main\";\r\nimport { introduction, sendCommands } from \"./actions/introduction\";\r\nimport {\r\n  GREETINGS,\r\n  HEY_EMOJIES,\r\n  USER_JOIN_GREETINGS,\r\n} from \"./utils/reply/replies\";\r\nimport { random } from \"./actions/sendMessage\";\r\nconst express = require(\"express\");\r\nimport * as dotenv from \"dotenv\";\r\nimport { Request, Response } from \"express\";\r\nimport { COMMANDS_CMDS } from \"./utils/Commands/instructions\";\r\n// import {\r\n//   addIndianTime,\r\n//   sendClassNotification,\r\n// } from \"./actions/sendClassNotification\";\r\nimport { grpLeaveStickers } from \"./assets/assets\";\r\nimport { log } from \"./utils/log\";\r\nimport { MessageType, WA_Grp } from \"./types/types\";\r\nimport { UserModel } from \"./services/modals\";\r\nimport mongoose from \"mongoose\";\r\n// import axios from \"axios\";\r\n// import { endOfToday } from \"date-fns\";\r\nimport { sendAndDeleteMsg } from \"./actions/sendAndDeleteMsg\";\r\nimport { pingEveryone } from \"./actions/pingEveryone\";\r\nconst { MongoStore } = require(\"wwebjs-mongo\");\r\ndotenv.config();\r\n\r\n// Initialized App\r\nconst app = express();\r\n\r\n// For Development Enviornment\r\nconst LOCAL = String(process.env.dev) === \"true\";\r\nexport const BOT = LOCAL ? 1 : 0;\r\nexport const WA_BOT_ID = LOCAL\r\n  ? (process.env.WA_BOT_ID_DEV as string)\r\n  : (process.env.WA_BOT_ID as string);\r\n\r\nconst DB_URL = LOCAL\r\n  ? (process.env.DEV_DB_URL as string)\r\n  : (process.env.PROD_DB_URL as string);\r\n\r\n// Initializing Client\r\nmongoose\r\n  .connect(DB_URL)\r\n  .then(() => {\r\n    console.log(\"connected to DB\");\r\n    const store = new MongoStore({ mongoose: mongoose });\r\n    let client: Client;\r\n    if (LOCAL) {\r\n      client = new Client({\r\n        puppeteer: {\r\n          headless: true,\r\n          args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\r\n        },\r\n        authStrategy: new LocalAuth({\r\n          dataPath: `${__dirname}/sessions`,\r\n        }),\r\n      });\r\n    } else {\r\n      client = new Client({\r\n        puppeteer: {\r\n          headless: true,\r\n          args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\r\n        },\r\n        authStrategy: new RemoteAuth({\r\n          store: store,\r\n          backupSyncIntervalMs: 300000,\r\n        }),\r\n      });\r\n    }\r\n    // Event \"REMOTE SESSION SAVED\"\r\n    client.on(\"remote_session_saved\", () => {\r\n      log({ msg: \"Remote auth session saved\", type: \"INFO\", error: false });\r\n    });\r\n\r\n    // Event \"DISCONNECTED\"\r\n    client.on(\"disconnected\", () => {\r\n      log({ msg: \"Client DISCONNECTED\", type: \"DISCONNECTED\", error: false });\r\n    });\r\n\r\n    // For QR Code\r\n    client.on(\"qr\", (qr: string) => {\r\n      qrcode.generate(qr, { small: true });\r\n      console.log(qr);\r\n    });\r\n\r\n    // Event \"READY\"\r\n    client.on(\"ready\", async () => {\r\n      log({ msg: \"Client Connected\", type: \"CONNECTED\", error: false });\r\n      client.sendMessage(\r\n        process.env.WA_BOT_ID_DEV as string,\r\n        `${process.env.BOT_NAME as string}: I am Connected BOSS`\r\n      );\r\n    });\r\n\r\n    // Event \"MESSAGE_CREATE\"\r\n    client.on(\"message_create\", async (message: WAWebJS.Message) => {\r\n      // Check if message is from Group or Not, if yes, who contains whoean or userID\r\n      const who: MessageType = checkMessage(message);\r\n      // Mention Logic\r\n      const str: string[] = message.mentionedIds;\r\n      const isMention =\r\n        (message.body[0] === \"@\" && str.includes(\"919871453667@c.us\")) ||\r\n        message.body\r\n          .toLowerCase()\r\n          .split(\" \")\r\n          .includes(`@${(process.env.BOT_NAME as String).toLocaleLowerCase()}`);\r\n      if (isMention && who !== \"NONE\" && message.body.split(\" \").length === 1) {\r\n        introduction(client, who, message);\r\n      }\r\n\r\n      let allChats = await client.getChats();\r\n      const WA_BOT: WA_Grp = allChats[BOT];\r\n\r\n      // Command check logic\r\n      if (\r\n        who !== \"NONE\" &&\r\n        COMMANDS_CMDS.includes(message.body.split(\",\")[0].toLocaleLowerCase())\r\n      ) {\r\n        sendCommands(client, message, who);\r\n      }\r\n\r\n      // Ping Everyone\r\n      if (who == \"ADMIN\" && [\"everyone\"].includes(message.body)) {\r\n        await pingEveryone(client, message);\r\n      }\r\n\r\n      // Checks if message's first letter is BOT_PREFIX\r\n      if (\r\n        who !== \"NONE\" &&\r\n        message.body[0] === (process.env.BOT_PREFIX as string)\r\n      ) {\r\n        await main(client, message, who);\r\n      }\r\n      // !@onlyUseOnce ONLY USE ONCE\r\n      if (who === \"ADMIN\" && message.body === \"load\") {\r\n        console.log(WA_BOT.participants);\r\n        WA_BOT.participants?.forEach(async (participant) => {\r\n          UserModel.create({\r\n            name: participant.id.user,\r\n            chatId: participant.id._serialized,\r\n          });\r\n        });\r\n        WA_BOT.sendMessage(\r\n          \"SUCCESSFULLY ADDED ALL THE STUDENTS IN THE DB, MASTER!\"\r\n        );\r\n      }\r\n    });\r\n\r\n    // Event \"GROUP_JOIN\"\r\n    client.on(\"group_join\", async (msg: GroupNotification) => {\r\n      if (msg.chatId === (process.env.WA_BOT_ID as string)) {\r\n        log({\r\n          msg: `${msg.recipientIds[0]} Joined the Group`,\r\n          type: \"GROUP_JOIN\",\r\n          error: false,\r\n        });\r\n      }\r\n      if (msg.chatId === WA_BOT_ID) {\r\n        const contact = await client.getNumberId(msg.recipientIds[0]);\r\n        const details = await client.getContactById(contact?._serialized || \"\");\r\n        if (details.name) {\r\n          sendAndDeleteMsg(\r\n            client,\r\n            msg,\r\n            msg.recipientIds[0], `${process.env.BOT_NAME as String}: *${\r\n              details.name\r\n            }* Thanks for joining the Group!\\n${\r\n              USER_JOIN_GREETINGS.messages[\r\n                random(USER_JOIN_GREETINGS.messageNum)\r\n              ]\r\n            }\\nHey new ${GREETINGS.member[random(GREETINGS.memberMsgNumber)]} ${\r\n              HEY_EMOJIES[random(HEY_EMOJIES.length)]\r\n            }!\\nCheck out what bot(${\r\n              process.env.BOT_NAME as String\r\n            }) can do by *Mentioning* me!\\nor check the Commands of ${\r\n              process.env.BOT_NAME as String\r\n            } by typing\\n*${\r\n              process.env.BOT_PREFIX as string\r\n            }AllCmds*\\n*IN THE GROUP*\\nSimply watch the Video: https://drive.google.com/file/d/1tl33VralV0AXQ2EDJYnjC6r2eaCUHr-l/view?usp=sharing`\r\n          );\r\n\r\n          // const sticker = MessageMedia.fromFilePath(\r\n          //   `${__dirname}/assets/images/grpJoinLeaveImgs/${\r\n          //     grpJoinStickers.images[random(grpJoinStickers.numOfImgs)]\r\n          //   }.png`\r\n          // );\r\n          // client.sendMessage(msg.recipientIds[0], sticker, {\r\n          //   sendMediaAsSticker: true,\r\n          // });\r\n        } else {\r\n          sendAndDeleteMsg(\r\n            client,\r\n            msg,\r\n            msg.recipientIds[0],\r\n            `${process.env.BOT_NAME as String}: ${\r\n              GREETINGS.member[random(GREETINGS.memberMsgNumber)]\r\n            }, Thanks for Joining the Group!\\n${\r\n              USER_JOIN_GREETINGS.messages[\r\n                random(USER_JOIN_GREETINGS.messageNum)\r\n              ]\r\n            }\\nHey new ${GREETINGS.member[random(GREETINGS.memberMsgNumber)]} ${\r\n              HEY_EMOJIES[random(HEY_EMOJIES.length)]\r\n            }!\\nCheck out what bot(${\r\n              process.env.BOT_NAME as String\r\n            }) can do by *Mentioning* me!\\nor check the Commands of ${\r\n              process.env.BOT_NAME as String\r\n            } by typing\\n*${\r\n              process.env.BOT_PREFIX as string\r\n            }AllCmds*\\n*IN THE GROUP*\\nSimply watch the Video: https://drive.google.com/file/d/1tl33VralV0AXQ2EDJYnjC6r2eaCUHr-l/view?usp=sharing`\r\n          );\r\n          // const sticker = MessageMedia.fromFilePath(\r\n          //   `${__dirname}/assets/images/grpJoinLeaveImgs/${\r\n          //     grpJoinStickers.images[random(grpJoinStickers.numOfImgs)]\r\n          //   }.png`\r\n          // );\r\n          // client.sendMessage(msg.recipientIds[0], sticker, {\r\n          //   sendMediaAsSticker: true,\r\n          // });\r\n        }\r\n      }\r\n    });\r\n\r\n    // GroupNotification {\r\n    //   id: {\r\n    //     fromMe: boolean,\r\n    //     remote: '1203630xxxxxxxxx@g.us',\r\n    //     id: '26650709261xxxxxxxxxx',\r\n    //     participant: '919990xxxxxxxx@c.us',\r\n    //     _serialized: 'false_12036xxxxxxxxxxxxx475@g.us_2665xxxxxxxxxxxx72395334_91xxxxxxxxxxxxx656@c.us'\r\n    //   },\r\n    //   body: '',\r\n    //   type: 'invite',\r\n    //   timestamp: 1672395334,\r\n    //   chatId: '1203630442xxxxxxxxx@g.us',\r\n    //   author: undefined,\r\n    //   recipientIds: [ '9199902xxxxxxxxx@c.us' ]\r\n    // }\r\n    client.on(\r\n      \"group_leave\",\r\n      async (notification: WAWebJS.GroupNotification) => {\r\n        let grpId = notification.chatId;\r\n        if (grpId === (process.env.WA_BOT_ID as string)) {\r\n          log({\r\n            msg: `${notification.recipientIds[0]} left the Group`,\r\n            type: \"GROUP_LEFT\",\r\n            error: false,\r\n          });\r\n        }\r\n        const sticker = MessageMedia.fromFilePath(\r\n          `${__dirname}/../src/assets/images/grpJoinLeaveImgs/${\r\n            grpLeaveStickers.images[random(grpLeaveStickers.numOfImgs)]\r\n          }.png`\r\n        );\r\n        if (notification.chatId === WA_BOT_ID) {\r\n          const allChats = await client.getChats();\r\n          const WA_BOT = allChats[BOT];\r\n          WA_BOT.sendMessage(\r\n            `${process.env.BOT_NAME as String}: somebody left`\r\n          );\r\n          WA_BOT.sendMessage(sticker, { sendMediaAsSticker: true });\r\n        }\r\n        await UserModel.findOneAndDelete({ chatId: notification.chatId });\r\n      }\r\n    );\r\n\r\n    // For checking the classes\r\n    // setInterval(async () => {\r\n    //   const chats = await client.getChats();\r\n    //   const WA_BOT: WA_Grp = chats[BOT];\r\n    //   sendClassNotification(WA_BOT);\r\n    //   log({ msg: \"Checked\", type: \"INFO\", error: false });\r\n    // }, 5 * 60 * 1000); // every 5 minutes\r\n\r\n    client.initialize();\r\n  })\r\n  .catch((err: any) => {\r\n    log({ msg: err, type: \"ERROR\", error: true });\r\n  });\r\n\r\n// Get Bot LIVE\r\n// Continuously ping the server to prevent it from becoming idle\r\n// const intervalId = setInterval(async () => {\r\n//   await axios.get(\"https://iitm-wa-bot.onrender.com/\");\r\n//   console.log(\"[SERVER] Pinged server\");\r\n// }, 14 * 60 * 1000); // every 14 minutes\r\n//\r\n// // To stop the bot at Night\r\n// const etaMs = endOfToday().getTime() - addIndianTime(new Date()).getTime();\r\n// setInterval(() => {\r\n//   clearInterval(intervalId);\r\n// }, etaMs);\r\n\r\nconst port = Number(process.env.PORT) || 3005;\r\n\r\napp.get(\"/\", (_: Request, res: Response) => {\r\n  res.send(\"BOT\");\r\n});\r\napp.listen(port, () =>\r\n  log({\r\n    msg: `[SERVER] Server is running on port ${port}`,\r\n    type: \"INFO\",\r\n    error: false,\r\n  })\r\n);\r\n\r\n// All other pages should be returned as error pages\r\napp.all(\"*\", (_: Request, res: Response) => {\r\n  res\r\n    .status(404)\r\n    .send(\r\n      \"<h1>Sorry, this page does not exist!</h1><br><a href='/'>Back to Home</a>\"\r\n    );\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
