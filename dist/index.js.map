{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import * as WAWebJS from \"whatsapp-web.js\";\nimport {\n  Client,\n  GroupNotification,\n  LocalAuth,\n  MessageMedia,\n  RemoteAuth,\n} from \"whatsapp-web.js\";\nimport qrcode = require(\"qrcode-terminal\");\nimport { checkMessage } from \"./actions/messageActions\";\nimport { main } from \"./controllers/main\";\nimport { introduction, sendCommands } from \"./actions/introduction\";\nimport {\n  GREETINGS,\n  HEY_EMOJIES,\n  USER_JOIN_GREETINGS,\n} from \"./utils/reply/replies\";\nimport { random } from \"./actions/sendMessage\";\nconst express = require(\"express\");\nimport * as dotenv from \"dotenv\";\nimport { Request, Response } from \"express\";\nimport { COMMANDS_CMDS } from \"./utils/Commands/instructions\";\n// import {\n//   addIndianTime,\n//   sendClassNotification,\n// } from \"./actions/sendClassNotification\";\nimport { grpLeaveStickers } from \"./assets/assets\";\nimport { log } from \"./utils/log\";\nimport { MessageType, WA_Grp } from \"./types/types\";\nimport { UserModel } from \"./services/modals\";\nimport mongoose from \"mongoose\";\n// import axios from \"axios\";\n// import { endOfToday } from \"date-fns\";\nimport { sendAndDeleteMsg } from \"./actions/sendAndDeleteMsg\";\nimport { pingEveryone } from \"./actions/pingEveryone\";\nconst { MongoStore } = require(\"wwebjs-mongo\");\ndotenv.config();\n\n// Initialized App\nconst app = express();\n\n// For Development Enviornment\nconst LOCAL = String(process.env.dev) === \"true\";\nexport const BOT = LOCAL ? 1 : 0;\nexport const WA_BOT_ID = LOCAL\n  ? (process.env.WA_BOT_ID_DEV as string)\n  : (process.env.WA_BOT_ID as string);\n\nconst DB_URL = LOCAL\n  ? (process.env.DEV_DB_URL as string)\n  : (process.env.PROD_DB_URL as string);\n\n// Initializing Client\nmongoose\n  .connect(DB_URL)\n  .then(() => {\n    console.log(\"connected to DB\");\n    const store = new MongoStore({ mongoose: mongoose });\n    let client: Client;\n    if (LOCAL) {\n      client = new Client({\n        puppeteer: {\n          headless: true,\n          args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\n        },\n        authStrategy: new LocalAuth({\n          dataPath: `${__dirname}/sessions`,\n        }),\n      });\n    } else {\n      client = new Client({\n        puppeteer: {\n          headless: true,\n          args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\n        },\n        authStrategy: new RemoteAuth({\n          store: store,\n          backupSyncIntervalMs: 300000,\n        }),\n      });\n    }\n    // Event \"REMOTE SESSION SAVED\"\n    client.on(\"remote_session_saved\", () => {\n      log({ msg: \"Remote auth session saved\", type: \"INFO\", error: false });\n    });\n\n    // Event \"DISCONNECTED\"\n    client.on(\"disconnected\", () => {\n      log({ msg: \"Client DISCONNECTED\", type: \"DISCONNECTED\", error: false });\n    });\n\n    // For QR Code\n    client.on(\"qr\", (qr: string) => {\n      qrcode.generate(qr, { small: true });\n      console.log(qr);\n    });\n\n    // Event \"READY\"\n    client.on(\"ready\", async () => {\n      log({ msg: \"Client Connected\", type: \"CONNECTED\", error: false });\n      client.sendMessage(\n        process.env.WA_BOT_ID_DEV as string,\n        `${process.env.BOT_NAME as string}: I am Connected BOSS`\n      );\n    });\n\n    // Event \"MESSAGE_CREATE\"\n    client.on(\"message_create\", async (message: WAWebJS.Message) => {\n      // Check if message is from Group or Not, if yes, who contains whoean or userID\n      const who: MessageType = checkMessage(message);\n      // Mention Logic\n      const str: string[] = message.mentionedIds;\n      const isMention =\n        (message.body[0] === \"@\" && str.includes(\"919871453667@c.us\")) ||\n        message.body\n          .toLowerCase()\n          .split(\" \")\n          .includes(`@${(process.env.BOT_NAME as String).toLocaleLowerCase()}`);\n      if (isMention && who !== \"NONE\" && message.body.split(\" \").length === 1) {\n        introduction(client, who, message);\n      }\n\n      let allChats = await client.getChats();\n      const WA_BOT: WA_Grp = allChats[BOT];\n      allChats = [];\n\n      // Command check logic\n      if (\n        who !== \"NONE\" &&\n        COMMANDS_CMDS.includes(message.body.split(\",\")[0].toLocaleLowerCase())\n      ) {\n        sendCommands(client, message, who);\n      }\n\n      // Ping Everyone\n      if (who == \"ADMIN\" && [\"everyone\"].includes(message.body)) {\n        await pingEveryone(client, message);\n      }\n\n      // Checks if message's first letter is BOT_PREFIX\n      if (\n        who !== \"NONE\" &&\n        message.body[0] === (process.env.BOT_PREFIX as string)\n      ) {\n        await main(client, message, who);\n      }\n      if (who === \"ADMIN\" && message.body === \"load\") {\n        WA_BOT.participants?.forEach(async (participant) => {\n          await UserModel.create({\n            name: participant.id.user,\n            chatId: participant.id._serialized,\n          });\n        });\n        WA_BOT.sendMessage(\n          \"ADDED ALL THE STUDENTS TO THE DB SUCCESSFULLY MASTER!\"\n        );\n      }\n    });\n\n    // Event \"GROUP_JOIN\"\n    client.on(\"group_join\", async (msg: GroupNotification) => {\n      log({\n        msg: `${msg.recipientIds[0]} Joined the Group`,\n        type: \"GROUP_JOIN\",\n        error: false,\n      });\n      if (msg.chatId === WA_BOT_ID) {\n        const contact = await client.getNumberId(msg.recipientIds[0]);\n        const details = await client.getContactById(contact?._serialized || \"\");\n        if (details.name) {\n          sendAndDeleteMsg(\n            client,\n            msg,\n            msg.recipientIds[0],\n            `${process.env.BOT_NAME as String}: *${\n              details.name\n            }* Thanks for joining the Group!\\n${\n              USER_JOIN_GREETINGS.messages[\n                random(USER_JOIN_GREETINGS.messageNum)\n              ]\n            }\\nHey new ${GREETINGS.member[random(GREETINGS.memberMsgNumber)]} ${\n              HEY_EMOJIES[random(HEY_EMOJIES.length)]\n            }!\\nCheck out what bot(${\n              process.env.BOT_NAME as String\n            }) can do by *Mentioning* me!\\nor check the Commands of ${\n              process.env.BOT_NAME as String\n            } by typing\\n*${\n              process.env.BOT_PREFIX as string\n            }AllCmds*\\n*IN THE GROUP*\\nSimply watch the Video: https://drive.google.com/file/d/1tl33VralV0AXQ2EDJYnjC6r2eaCUHr-l/view?usp=sharing`\n          );\n\n          // const sticker = MessageMedia.fromFilePath(\n          //   `${__dirname}/assets/images/grpJoinLeaveImgs/${\n          //     grpJoinStickers.images[random(grpJoinStickers.numOfImgs)]\n          //   }.png`\n          // );\n          // client.sendMessage(msg.recipientIds[0], sticker, {\n          //   sendMediaAsSticker: true,\n          // });\n        } else {\n          sendAndDeleteMsg(\n            client,\n            msg,\n            msg.recipientIds[0],\n            `${process.env.BOT_NAME as String}: ${\n              GREETINGS.member[random(GREETINGS.memberMsgNumber)]\n            }, Thanks for Joining the Group!\\n${\n              USER_JOIN_GREETINGS.messages[\n                random(USER_JOIN_GREETINGS.messageNum)\n              ]\n            }\\nHey new ${GREETINGS.member[random(GREETINGS.memberMsgNumber)]} ${\n              HEY_EMOJIES[random(HEY_EMOJIES.length)]\n            }!\\nCheck out what bot(${\n              process.env.BOT_NAME as String\n            }) can do by *Mentioning* me!\\nor check the Commands of ${\n              process.env.BOT_NAME as String\n            } by typing\\n*${\n              process.env.BOT_PREFIX as string\n            }AllCmds*\\n*IN THE GROUP*\\nSimply watch the Video: https://drive.google.com/file/d/1tl33VralV0AXQ2EDJYnjC6r2eaCUHr-l/view?usp=sharing`\n          );\n          // const sticker = MessageMedia.fromFilePath(\n          //   `${__dirname}/assets/images/grpJoinLeaveImgs/${\n          //     grpJoinStickers.images[random(grpJoinStickers.numOfImgs)]\n          //   }.png`\n          // );\n          // client.sendMessage(msg.recipientIds[0], sticker, {\n          //   sendMediaAsSticker: true,\n          // });\n        }\n      }\n    });\n    client.on(\n      \"group_leave\",\n      async (notification: WAWebJS.GroupNotification) => {\n        log({\n          msg: `${notification.recipientIds[0]} left the Group`,\n          type: \"GROUP_LEFT\",\n          error: false,\n        });\n        const sticker = MessageMedia.fromFilePath(\n          `${__dirname}/../src/assets/images/grpJoinLeaveImgs/${\n            grpLeaveStickers.images[random(grpLeaveStickers.numOfImgs)]\n          }.png`\n        );\n        if (notification.chatId === WA_BOT_ID) {\n          const allChats = await client.getChats();\n          const WA_BOT = allChats[BOT];\n          WA_BOT.sendMessage(`${process.env.BOT_NAME as String}:`);\n          WA_BOT.sendMessage(sticker, { sendMediaAsSticker: true });\n        }\n      }\n    );\n\n    // For checking the classes\n    // setInterval(async () => {\n    //   const chats = await client.getChats();\n    //   const WA_BOT: WA_Grp = chats[BOT];\n    //   sendClassNotification(WA_BOT);\n    //   log({ msg: \"Checked\", type: \"INFO\", error: false });\n    // }, 5 * 60 * 1000); // every 5 minutes\n\n    client.initialize();\n  })\n  .catch((err: any) => {\n    log({ msg: err, type: \"ERROR\", error: true });\n  });\n\n// Get Bot LIVE\n// Continuously ping the server to prevent it from becoming idle\n// const intervalId = setInterval(async () => {\n//   await axios.get(\"https://iitm-wa-bot.onrender.com/\");\n//   console.log(\"[SERVER] Pinged server\");\n// }, 14 * 60 * 1000); // every 14 minutes\n//\n// // To stop the bot at Night\n// const etaMs = endOfToday().getTime() - addIndianTime(new Date()).getTime();\n// setInterval(() => {\n//   clearInterval(intervalId);\n// }, etaMs);\n\nconst port = Number(process.env.PORT) || 3005;\n\napp.get(\"/\", (_: Request, res: Response) => {\n  res.send(\"BOT\");\n});\napp.listen(port, () =>\n  log({\n    msg: `[SERVER] Server is running on port ${port}`,\n    type: \"INFO\",\n    error: false,\n  })\n);\n\n// All other pages should be returned as error pages\napp.all(\"*\", (_: Request, res: Response) => {\n  res\n    .status(404)\n    .send(\n      \"<h1>Sorry, this page does not exist!</h1><br><a href='/'>Back to Home</a>\"\n    );\n});\n"],
  "mappings": "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",
  "names": []
}
